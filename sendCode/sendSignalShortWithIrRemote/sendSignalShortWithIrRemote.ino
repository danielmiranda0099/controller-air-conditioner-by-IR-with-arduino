
#include <Arduino.h>

/*
 * Define macros for input and output pin etc.
 */
#include "PinDefinitionsAndMore.h"

#include <IRremote.h>

// On the Zero and others we switch explicitly to SerialUSB
#if defined(ARDUINO_ARCH_SAMD)
#define Serial SerialUSB
#endif

void setup() {
    pinMode(LED_BUILTIN, OUTPUT);

    Serial.begin(115200);
#if defined(__AVR_ATmega32U4__) || defined(SERIAL_USB) || defined(SERIAL_PORT_USBVIRTUAL)  || defined(ARDUINO_attiny3217)
    delay(4000); // To be able to connect Serial monitor after reset or power up and before first print out. Do not wait for an attached Serial Monitor!
#endif
    // Just to know which program is running on my Arduino
    Serial.println(F("START " __FILE__ " from " __DATE__ "\r\nUsing library version " VERSION_IRREMOTE));

    IrSender.begin(IR_SEND_PIN, ENABLE_LED_FEEDBACK); // Specify send pin and enable feedback LED at default feedback LED pin

    Serial.print(F("Ready to send IR signals at pin "));
#if defined(ARDUINO_ARCH_STM32) || defined(ESP8266)
    Serial.println(IR_SEND_PIN_STRING);
#else
    Serial.print(IR_SEND_PIN);
#endif
}


        
void loop() {
    const uint8_t NEC_KHZ = 38; // 38kHz carrier frequency for the NEC protocol
    // ON {8880,4570, 430,720, 380,620, 430,670, 430,1720, 330,70, 80,620, 130,70, 230,720, 380,620, 230,70, 180,670, 380,670, 330,1870, 380,670, 230,70, 130,1770, 380,1820, 380,620, 480,670, 380,670, 430,620, 280,120, 80,720, 330,670, 330,70, 30,670, 80,70, 280,670, 380,670, 430,720, 380,670, 380,670, 180,70, 180,720, 380,620, 480,620, 430,1720, 480,670, 380,670, 430,620, 480,670, 380,670, 430,1720, 480,1720, 430,620, 480,620, 430,670, 430,620, 480};  // Protocol=UNKNOWN Hash=0xDA594891 50 bits received
    // OFF {8930,4520, 530,570, 530,520, 530,570, 530,570, 530,520, 530,570, 530,570, 530,570, 480,570, 530,1670, 480,570, 530,1670, 530,1620, 530,570, 530,520, 530,570, 530,570, 530,570, 480,570, 530,570, 530,570, 530,520, 530,570, 530,570, 530,520, 530,570, 530,570, 530,520, 530,1670, 530,520, 530,570, 530,570, 530,520, 530,570, 530,1670, 530,1620, 530,570, 530,520, 530,570, 530,570, 530};  // Protocol=PULSE_DISTANCE Address=0x0 Command=0x0 Raw-Data=0xC10001A 40 bits LSB first
    // {8930,4520, 530,520, 580,520, 530,570, 530,1620, 530,570, 530,520, 580,520, 530,570, 530,520, 580,1620, 530,520, 580,1620, 530,1620, 580,520, 530,570, 530,520, 580,520, 530,570, 530,520, 580,520, 530,570, 530,520, 580,520, 530,570, 530,520, 580,520, 530,570, 530,570, 530,1620, 530,570, 530,520, 580,520, 530,570, 530,520, 580,1620, 530,1620, 530,570, 530,520, 580,520, 530,570, 530};  // Protocol=PULSE_DISTANCE Address=0x0 Command=0x0 Raw-Data=0xC10001A 40 bits LSB first


    const uint16_t irSignal[] = {8930,4520, 530,570, 530,520, 530,570, 530,570, 530,520, 530,570, 530,570, 530,570, 480,570, 530,1670, 480,570, 530,1670, 530,1620, 530,570, 530,520, 530,570, 530,570, 530,570, 480,570, 530,570, 530,570, 530,520, 530,570, 530,570, 530,520, 530,570, 530,570, 530,520, 530,1670, 530,520, 530,570, 530,570, 530,520, 530,570, 530,1670, 530,1620, 530,570, 530,520, 530,570, 530,570, 530};  // Protocol=PULSE_DISTANCE Address=0x0 Command=0x0 Raw-Data=0xC10001A 40 bits LSB first
    const uint16_t irSignal_ON[] = { 8880U, 4570U, 393U, 629U, 393U, 629U, 393U, 629U, 393U, 1763U, 393U, 81U, 81U, 629U, 81U, 81U, 224U, 629U, 393U, 629U, 224U, 81U, 224U, 629U, 393U, 629U, 393U, 1763U, 393U, 629U, 224U, 81U, 81U, 1763U, 393U, 1763U, 393U, 629U, 629U, 629U, 393U, 629U, 393U, 629U, 224U, 81U, 81U, 629U, 393U, 629U, 393U, 81U, 81U, 629U, 81U, 81U, 224U, 629U, 393U, 629U, 393U, 629U, 393U, 629U, 393U, 629U, 224U, 81U, 224U, 629U, 393U, 629U, 629U, 629U, 393U, 1763U, 629U, 629U, 393U, 629U, 393U, 629U, 629U, 629U, 393U, 629U, 393U, 1763U, 629U, 1763U, 393U, 629U, 629U, 629U, 393U, 629U, 393U, 629U, 629U, 50000 };
    //{636, 17832, 3052, 8928, 552, 444, 552, 1440, 556, 444, 552, 444, 552, 444, 592, 404, 552, 444, 552, 444, 552, 448, 552, 1444, 548, 448, 548, 452, 544, 1468, 544, 452, 548, 448, 548, 1444, 552, 1440, 556, 1440, 552, 1440, 552, 1440, 552, 444, 556, 444, 552, 444, 552, 448, 548, 448, 548, 452, 544, 472, 536, 460, 544, 452, 548, 448, 552, 444, 552, 444, 556, 440, 556, 444, 552, 444, 552, 444, 552, 444, 552, 444, 552, 444, 552, 448, 548, 448, 552, 448, 548, 448, 548, 472, 524, 472, 536, 460, 544, 452, 548, 448, 548, 448, 552, 444, 556, 440, 556, 444, 552, 1440, 552, 1440, 552, 1444, 548, 1444, 568, 2932, 3028, 8936, 544, 1468, 528, 468, 540, 456, 548, 448, 548, 452, 548, 448, 548, 448, 552, 444, 552, 444, 552, 1440, 552, 444, 556, 444, 552, 1440, 552, 448, 548, 1448, 544, 1448, 548, 1468, 540, 1452, 548, 1444, 552, 1440, 552, 444, 552, 444, 552, 448, 552, 444, 552, 444, 552, 444, 552, 444, 552, 448, 548, 448, 548, 452, 544, 452, 548, 468, 528, 472, 540, 456, 544, 452, 548, 448, 548, 448, 552, 444, 552, 444, 552, 444, 552, 444, 556, 444, 552, 444, 552, 444, 552, 448, 548, 448, 548, 448, 548, 452, 544, 452, 548, 468, 528, 468, 544, 452, 548, 452, 548, 448, 548, 448, 552, 444, 552, 2948, 3032, 8928, 552, 1440, 552, 444, 552, 444, 556, 444, 548, 448, 552, 444, 552, 448, 548, 448, 548, 472, 524, 1468, 544, 452, 548, 448, 548, 1444, 552, 444, 556, 1440, 552, 1440, 552, 444, 552, 1440, 556, 1440, 552, 1444, 548, 1448, 544, 1468, 544, 1448, 548, 1444, 552, 1444, 552, 444, 552, 444, 552, 444, 552, 1440, 556, 1440, 552, 1440, 552, 448, 548, 448, 548, 452, 544, 472, 528, 468, 540, 456, 548, 448, 548, 452, 548, 1444, 552, 1440, 552, 444, 552, 444, 552, 1440, 556, 440, 556, 444, 552, 1444, 548, 448, 548, 452, 544, 472, 528, 468, 528, 468, 548, 1444, 552, 1444, 552, 1440, 552, 1440, 556};

    



  //433Mhz

  delay(5000);
  IrSender.sendRaw(rawData_6 , sizeof(rawData_6) / sizeof(rawData_6[0]) , 433000);
  
  
}
